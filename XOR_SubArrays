// Count the number of subarrays with given xor K

// Problem Statement: Given an array of integers A and an integer B. Find the total number of subarrays having bitwise XOR of all elements equal to k.Example 1:
// Input Format: A = [4, 2, 2, 6, 4] , k = 6
// Result: 4
// Explanation: The subarrays having XOR of their elements as 6 are  [4, 2], [4, 2, 2, 6, 4], [2, 2, 6], [6]

// Example 2:
// Input Format: A = [5, 6, 7, 8, 9], k = 5
// Result: 2
// Explanation: The subarrays having XOR of their elements as 5 are [5] and [5, 6, 7, 8, 9]

import java.util.*;

public class SubarrayXOR {
    public static int subarraysWithXorK(int[] a, int k) {
        int n = a.length;
        int xor = 0;
        int count = 0;
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, 1); // For cases when prefix XOR itself equals k

        for (int i = 0; i < n; i++) {
            xor ^= a[i];

            int required = xor ^ k;

            if (map.containsKey(required)) {
                count += map.get(required);
            }

            map.put(xor, map.getOrDefault(xor, 0) + 1);
        }
        return count;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input array size
        System.out.print("Enter the number of elements: ");
        int n = sc.nextInt();

        int[] a = new int[n];
        System.out.println("Enter the array elements:");
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        // Input target XOR value
        System.out.print("Enter the value of k: ");
        int k = sc.nextInt();

        // Function call
        int ans = subarraysWithXorK(a, k);
        System.out.println("The number of subarrays with XOR " + k + " is: " + ans);
    }
}
