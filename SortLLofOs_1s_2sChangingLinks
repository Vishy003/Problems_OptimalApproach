// Definition for singly-linked list node
class ListNode {
    int val;
    ListNode next;

    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}

class Solution {
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) return head;

        // Dummy heads and tails for 0s, 1s, and 2s
        ListNode zeroDummy = new ListNode(-1), zeroTail = zeroDummy;
        ListNode oneDummy = new ListNode(-1), oneTail = oneDummy;
        ListNode twoDummy = new ListNode(-1), twoTail = twoDummy;

        // Traverse and split nodes into three lists
        ListNode curr = head;
        while (curr != null) {
            if (curr.val == 0) {
                zeroTail.next = curr;
                zeroTail = zeroTail.next;
            } else if (curr.val == 1) {
                oneTail.next = curr;
                oneTail = oneTail.next;
            } else {
                twoTail.next = curr;
                twoTail = twoTail.next;
            }
            curr = curr.next;
        }

        // Connect the lists: 0s -> 1s -> 2s
        zeroTail.next = oneDummy.next != null ? oneDummy.next : twoDummy.next;
        oneTail.next = twoDummy.next;
        twoTail.next = null;

        // Return the head of the sorted list
        return zeroDummy.next;
    }
}
