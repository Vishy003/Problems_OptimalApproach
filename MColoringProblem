// M - Coloring Problem

// Problem Statement: Given an undirected graph and a number m, determine if the graph can be colored with at most m colors such that no two adjacent vertices of the graph are colored with the same color.

// Examples:

// Example 1:
// Input: 
// N = 4
// M = 3
// E = 5
// Edges[] = {
//   (0, 1),
//   (1, 2),
//   (2, 3),
//   (3, 0),
//   (0, 2)
// }

// Output: 1

// Explanation: It is possible to colour the given graph using 3 colours.

// Example 2:

// Input: 
// N = 3
// M = 2
// E = 3
// Edges[] = {
//   (0, 1),
//   (1, 2),
//   (0, 2)
// }

// Output: 0

// Explanation: It is not possible to color.

class Solution {
    public boolean graphColoring(boolean[][] graph, int m, int n) {
        int[] colors = new int[n];
        return solve(0, graph, colors, m, n);
    }

    private boolean solve(int node, boolean[][] graph, int[] colors, int m, int n) {
        if (node == n) return true;

        for (int col = 1; col <= m; col++) {
            if (isSafe(node, graph, colors, n, col)) {
                colors[node] = col;
                if (solve(node + 1, graph, colors, m, n)) return true;
                colors[node] = 0;
            }
        }
        return false;
    }

    private boolean isSafe(int node, boolean[][] graph, int[] colors, int n, int color) {
        for (int i = 0; i < n; i++) {
            if (graph[node][i] && colors[i] == color) return false;
        }
        return true;
    }
}
