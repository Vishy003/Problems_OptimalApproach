// Nth Root of a Number using Binary Search

// Problem Statement: Given two numbers N and M, find the Nth root of M. The nth root of a number M is defined as a number X when raised to the power N equals M. If the 'nth root is not an integer, return -1.

// Examples

// Example 1:
// Input Format: N = 3, M = 27
// Result: 3
// Explanation: The cube root of 27 is equal to 3.

// Example 2:
// Input Format: N = 4, M = 69
// Result: -1
// Explanation: The 4th root of 69 does not exist. So, the answer is -1.

class Solution {
    // Helper function to check mid^n vs m
    private int check(int mid, int n, int m) {
        long res = 1;
        for (int i = 1; i <= n; i++) {
            res *= mid;
            if (res > m) return 2; // mid^n > m
        }
        if (res == m) return 1;   // mid^n == m
        return 0;                 // mid^n < m
    }

    public int nthRoot(int n, int m) {
        int low = 1, high = m;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            int result = check(mid, n, m);

            if (result == 1) return mid;
            else if (result == 0) low = mid + 1;
            else high = mid - 1;
        }
        return -1; // No integer root exists
    }
}
