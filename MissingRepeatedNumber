// Find the repeating and missing numbers
// Example 1:
// Input Format:  array[] = {3,1,2,5,3}
// Result: {3,4)
// Explanation: A = 3 , B = 4 
// Since 3 is appearing twice and 4 is missing

// Example 2:
// Input Format: array[] = {3,1,2,5,4,6,7,5}
// Result: {5,8)
// Explanation: A = 5 , B = 8 
// Since 5 is appearing twice and 8 is missing
// Problem Statement: You are given a read-only array of N integers with values also in the range [1, N] both inclusive. Each integer appears exactly once except A which appears twice and B which is missing. The task is to find the repeating and missing numbers A and B where A repeats twice and B is missing.
class Solution {
    public int[] findErrorNums(int[] nums) {
        int n = nums.length;
        int xor = 0;

        // Step 1: XOR all elements and numbers from 1 to n
        for (int i = 0; i < n; i++) {
            xor ^= nums[i];
            xor ^= (i + 1);
        }

        // Step 2: Find the rightmost set bit
        int diffBit = xor & -xor;

        // Step 3: Divide into two groups
        int group1 = 0, group2 = 0;
        for (int num : nums) {
            if ((num & diffBit) != 0)
                group1 ^= num;
            else
                group2 ^= num;
        }
        for (int i = 1; i <= n; i++) {
            if ((i & diffBit) != 0)
                group1 ^= i;
            else
                group2 ^= i;
        }

        // Step 4: Determine which is missing and which is repeating
        for (int num : nums) {
            if (num == group1) return new int[]{group1, group2};
        }

        return new int[]{group2, group1};
    }
}
