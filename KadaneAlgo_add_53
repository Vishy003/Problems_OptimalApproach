// Kadane's Algorithm : Maximum Subarray Sum in an Array

// Problem Statement: Given an integer array arr, find the contiguous subarray (containing at least one number) which
// has the largest sum and returns its sum and prints the subarray. Example 1:

// Input: arr = [-2,1,-3,4,-1,2,1,-5,4] 

// Output: 6 

// Explanation: [4,-1,2,1] has the largest sum = 6. 

// Examples 2: 

// Input: arr = [1] 

// Output: 1 

// Explanation: Array has only one element and which is giving positive sum of 1. 
import java.util.*;

public class Solution {

    // 1. Brute Force (3 loops)
    public static int bruteForce(int[] arr, int n) {
        int maxi = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int sum = 0;
                for (int k = i; k <= j; k++) {
                    sum += arr[k];
                }
                maxi = Math.max(maxi, sum);
            }
        }
        return maxi;
    }

    // 2. Improved (2 loops)
    public static int better(int[] arr, int n) {
        int maxi = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += arr[j];
                maxi = Math.max(maxi, sum);
            }
        }
        return maxi;
    }

    // 3. Kadaneâ€™s Optimal
    public static int kadane(int[] arr, int n) {
        int sum = 0, maxi = arr[0];
        for (int i = 0; i < n; i++) {
            sum += arr[i];
            maxi = Math.max(maxi, sum);
            if (sum < 0) sum = 0;
        }
        return maxi;
    }

    // 4. Kadane with subarray printing
    public static int kadaneWithSubarray(int[] arr, int n) {
        int sum = 0, maxi = arr[0];
        int start = 0, ansStart = 0, ansEnd = 0;

        for (int i = 0; i < n; i++) {
            if (sum == 0) start = i;
            sum += arr[i];

            if (sum > maxi) {
                maxi = sum;
                ansStart = start;
                ansEnd = i;
            }

            if (sum < 0) sum = 0;
        }

        for (int i = ansStart; i <= ansEnd; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();

        return maxi;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();            // size
        int[] arr = new int[n];          // array
        for (int i = 0; i < n; i++) arr[i] = sc.nextInt();

        int choice = sc.nextInt();       // choose method

        int result = 0;
        switch (choice) {
            case 1:
                result = bruteForce(arr, n);
                break;
            case 2:
                result = better(arr, n);
                break;
            case 3:
                result = kadane(arr, n);
                break;
            case 4:
                result = kadaneWithSubarray(arr, n);
                break;
            default:
                System.out.println("Invalid choice");
                return;
        }

        System.out.println(result);
        sc.close();
    }
}
