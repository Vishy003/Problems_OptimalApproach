// Median of Row Wise Sorted Matrix

// Problem Statement: Given a row-wise sorted matrix of size MXN, where M is no. of rows and N is no. of columns, find the median in the given matrix.

// Note: MXN is odd.

// Examples
//                     Example 1:
//                     Input Format:M = 3, N = 3, matrix[][] =
//                     1 4 9 
//                     2 5 6
//                     3 8 7
//                     Result: 5
                    
//                     Explanation:  If we find the linear sorted array, the array becomes 1 2 3 4 5 6 7 8 9. So, median = 5
                    
//                     Example 2:
//                     Input Format:M = 3, N = 3, matrix[][] =
//                     1 3 8 
//                     2 3 4
//                     1 2 5
//                     Result: 3
                    
//                     Explanation:  If we find the linear sorted array, the array becomes 1 1 2 2 3 3 4 5 7 8. So, median = 3

class Solution {
    public int findMedian(int[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;

        int low = 1;
        int high = 100000; // Based on constraint: 1 <= matrix[i][j] <= 10^5

        while (low <= high) {
            int mid = (low + high) / 2;
            int count = 0;

            // Count how many numbers are less than or equal to mid
            for (int i = 0; i < rows; i++) {
                count += countLessOrEqual(matrix[i], mid);
            }

            if (count <= (rows * cols) / 2) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return low;
    }

    // Helper to count elements <= target in a sorted row using binary search
    private int countLessOrEqual(int[] row, int target) {
        int low = 0, high = row.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (row[mid] <= target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return low;
    }
}
