// Longest Subarray with sum K | [Postives and Negatives]

// Problem Statement: Given an array and a sum k, we need to print the length of the longest subarray that sums to k.

// Input Format: N = 3, k = 1, array[] = {-1, 1, 1}
// Result: 3
// Explanation: The longest subarray with sum 1 is {-1, 1, 1}. And its length is 3.

import java.util.*;

public class LongestSubarraySumWithNegatives {

    // 1. Brute-force approach (Triple loop)
    public static int bruteForce(int[] a, int k) {
        int len = 0;
        int n = a.length;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int sum = 0;
                for (int l = i; l <= j; l++) {
                    sum += a[l];
                }
                if (sum == k) {
                    len = Math.max(len, j - i + 1);
                }
            }
        }
        return len;
    }

    // 2. Optimized brute-force using two loops
    public static int twoLoopOptimized(int[] a, int k) {
        int len = 0;
        int n = a.length;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += a[j];
                if (sum == k) {
                    len = Math.max(len, j - i + 1);
                }
            }
        }
        return len;
    }

    // 3. HashMap-based approach using prefix sums
    public static int hashMapApproach(int[] a, int k) {
        Map<Integer, Integer> preSumMap = new HashMap<>();
        int sum = 0, maxLen = 0;

        for (int i = 0; i < a.length; i++) {
            sum += a[i];

            if (sum == k) {
                maxLen = i + 1;
            }

            int rem = sum - k;
            if (preSumMap.containsKey(rem)) {
                maxLen = Math.max(maxLen, i - preSumMap.get(rem));
            }

            if (!preSumMap.containsKey(sum)) {
                preSumMap.put(sum, i);
            }
        }
        return maxLen;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input array
        System.out.print("Enter the size of the array: ");
        int n = sc.nextInt();
        int[] arr = new int[n];
        System.out.print("Enter the elements of the array (can be positive/negative): ");
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        // Input target sum
        System.out.print("Enter the value of k: ");
        int k = sc.nextInt();

        // Menu-driven loop
        int choice;
        do {
            System.out.println("\nChoose an approach to find the longest subarray with sum = " + k + ":");
            System.out.println("1. Brute-force (Triple loop)");
            System.out.println("2. Optimized Brute-force (Double loop)");
            System.out.println("3. HashMap-based (Prefix Sum)");
            System.out.println("4. Exit");

            System.out.print("Enter your choice: ");
            choice = sc.nextInt();

            int result = 0;
            switch (choice) {
                case 1:
                    result = bruteForce(arr, k);
                    System.out.println("Length using Brute-force: " + result);
                    break;
                case 2:
                    result = twoLoopOptimized(arr, k);
                    System.out.println("Length using Optimized Brute-force: " + result);
                    break;
                case 3:
                    result = hashMapApproach(arr, k);
                    System.out.println("Length using HashMap Prefix Sum: " + result);
                    break;
                case 4:
                    System.out.println("Exiting program.");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }

        } while (choice != 4);

        sc.close();
    }
}
